REQUERIMIENTOS

1. EXPLICACION E HISTORIA
El conquián o tercerilla es un juego de naipes que se juega con la baraja española. Se juega con dos o tres jugadores, la razón para     el 
cambio de nombre es esta misma siendo "tercerilla el que se juega de tres".
- Mazo: Baraja española
- Origen: México
- Tarjetas: 40
- Jugadores: 2-6 
- Tiempo para jugar: 20 minutos.


2.DESCRIPCION Y DETALLE DEL PROTOCOLO
El protocolo utilizado se formó utilizando el formato JSON. La manera en la que funciona es que ambas respuestas del Servidor y del Cliente 
mandan un parámetro ‘opcion’ el cual define el tipo de respuesta que se está recibiendo. Es decir, si el cliente recibe una respuesta   con 
‘opcion’: 0 significa que está recibiendo un nuevo estado del juego, y si recibe una respuesta con ‘opcion’: 3 es porque está recibiendo un 
mensaje de otro jugador.

  PROTOCOLO SERVER
  Respuestas del server al cliente:
  opcion,
  gameId,
  turnoId, 
  players, 
    playerId,
    playerName,
  mesa,
    nombreCarta,
    cartaId,
  cartaBasura,
    cartaId,
    nombreCarta,
  cantidadCartasBaraja,
  cantidadCartas,
  
  PROTOCOLO CLIENTE
  Respuestas del cliente al server:
  opcion, 
  playerId,
  gameId,
  pasar,
  cartaBasuraId,
  cartasMano,
    cartaId,
  cartaPagarId,
  
 3. VIDEO
 https://youtu.be/9h4wbNHmml4
 
 4. RETOS Y DIFICULTADES
 En la definición del protocolo fue un poco complicado porque es un lienzo en blanco, al principio fue difícil definirlo pero conforme se 
 fue construyendo fue más sencillo.
 Otra de las dificultades que tuvimos fue la capacidad de compartir nuestras ideas ya que no nos podíamos ver en persona y trabajar juntos 
 en esa manera.
 También pensamos que el no poder usar librerías externas hizo que este proyecto fuera más retador, ya que teníamos que definir e 
 implementar todo lo necesario para poder replicar el juego en un programa.
 Por último, aprendimos sobre la importancia de protocolos de comunicación en una estructura cliente-servidor. Entendimos la importancia de 
 la comunicación y comprensión sobre la serialización de datos a bajo nivel. Y logramos mantener la sincronización de distintos objetos que 
 comparten un estado.


    
